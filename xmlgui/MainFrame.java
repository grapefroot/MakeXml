/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package xmlgui;

import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.input.KeyCode;
import javafx.util.Pair;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;

/**
 *
 * @author Salnikov
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public MainFrame() {
        initComponents();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        ThemeTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        TypeCheckBox = new javax.swing.JCheckBox();
        HeadCheckBox = new javax.swing.JCheckBox();
        TypeTextField = new javax.swing.JTextField();
        HeadTextField = new javax.swing.JTextField();
        QuestionCheckBox = new javax.swing.JCheckBox();
        questionScrollPane = new javax.swing.JScrollPane();
        questionTextArea = new javax.swing.JTextArea();
        ImageCheckBox = new javax.swing.JCheckBox();
        ImageTextField = new javax.swing.JTextField();
        CodeScrollPane = new javax.swing.JScrollPane();
        CodeTextArea = new javax.swing.JTextArea();
        CodeCheckBox = new javax.swing.JCheckBox();
        AddAnswerButton = new javax.swing.JButton();
        AnswerTextField = new javax.swing.JTextField();
        CorrectCheckBox = new javax.swing.JCheckBox();
        CommentTextField = new javax.swing.JTextField();
        ExplanationCheckField = new javax.swing.JCheckBox();
        HelpCheckBox = new javax.swing.JCheckBox();
        CommentCheckBox = new javax.swing.JCheckBox();
        ExplanationTextField = new javax.swing.JTextField();
        HelpTextField = new javax.swing.JTextField();
        MakeButton = new javax.swing.JButton();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        ThemeTextField.setText("Theme");
        ThemeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThemeTextFieldActionPerformed(evt);
            }
        });
        ThemeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ThemeTextFieldKeyPressed(evt);
            }
        });

        jLabel1.setText("Тема");

        TypeCheckBox.setText("Тип");
        TypeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TypeCheckBoxActionPerformed(evt);
            }
        });

        HeadCheckBox.setText("Head");
        HeadCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HeadCheckBoxActionPerformed(evt);
            }
        });

        TypeTextField.setText("Type");
        TypeTextField.setEnabled(false);
        TypeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TypeTextFieldKeyPressed(evt);
            }
        });

        HeadTextField.setText("Head");
        HeadTextField.setEnabled(false);
        HeadTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HeadTextFieldActionPerformed(evt);
            }
        });

        QuestionCheckBox.setText("Вопрос");
        QuestionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuestionCheckBoxActionPerformed(evt);
            }
        });

        questionTextArea.setColumns(20);
        questionTextArea.setRows(5);
        questionTextArea.setText("Question");
        questionTextArea.setEnabled(false);
        questionScrollPane.setViewportView(questionTextArea);

        ImageCheckBox.setText("Изображение");
        ImageCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImageCheckBoxActionPerformed(evt);
            }
        });

        ImageTextField.setText("Img");
        ImageTextField.setEnabled(false);
        ImageTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImageTextFieldActionPerformed(evt);
            }
        });

        CodeTextArea.setColumns(20);
        CodeTextArea.setRows(5);
        CodeTextArea.setText("Code");
        CodeTextArea.setEnabled(false);
        CodeScrollPane.setViewportView(CodeTextArea);

        CodeCheckBox.setText("Код");
        CodeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CodeCheckBoxActionPerformed(evt);
            }
        });

        AddAnswerButton.setText("Добавить ответ");

        AnswerTextField.setText("Ответ");
        AnswerTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnswerTextFieldActionPerformed(evt);
            }
        });

        CorrectCheckBox.setText("правильный");

        CommentTextField.setText("Comment");
        CommentTextField.setEnabled(false);

        ExplanationCheckField.setText("Объяснение");
        ExplanationCheckField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExplanationCheckFieldActionPerformed(evt);
            }
        });

        HelpCheckBox.setText("Помощь");
        HelpCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpCheckBoxActionPerformed(evt);
            }
        });

        CommentCheckBox.setText("Комментарии");
        CommentCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CommentCheckBoxActionPerformed(evt);
            }
        });

        ExplanationTextField.setText("Explanation");
        ExplanationTextField.setEnabled(false);

        HelpTextField.setText("Help");
        HelpTextField.setEnabled(false);

        MakeButton.setText("Make");
        MakeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MakeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(TypeCheckBox)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(HeadCheckBox))
                                .addGap(53, 53, 53)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(HeadTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                                    .addComponent(ThemeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TypeTextField)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(QuestionCheckBox)
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(questionScrollPane)
                                    .addComponent(CodeScrollPane)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(AnswerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(CorrectCheckBox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(AddAnswerButton)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(ImageTextField)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ImageCheckBox)
                            .addComponent(CodeCheckBox)
                            .addComponent(ExplanationCheckField)
                            .addComponent(HelpCheckBox)
                            .addComponent(CommentCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ExplanationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CommentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(MakeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(HelpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ThemeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TypeCheckBox)
                    .addComponent(TypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HeadCheckBox)
                    .addComponent(HeadTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(QuestionCheckBox)
                    .addComponent(questionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ImageCheckBox)
                    .addComponent(ImageTextField))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CodeCheckBox)
                    .addComponent(CodeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AnswerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CorrectCheckBox)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(AddAnswerButton)))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ExplanationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ExplanationCheckField))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HelpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HelpCheckBox))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CommentCheckBox)
                    .addComponent(CommentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MakeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        ThemeTextField.selectAll();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HeadCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HeadCheckBoxActionPerformed
        if(HeadCheckBox.isSelected()) {
            HeadTextField.setEnabled(true);
            HeadTextField.requestFocus();
            HeadTextField.selectAll();
        } else {
            HeadTextField.setEnabled(false);
       }
    }//GEN-LAST:event_HeadCheckBoxActionPerformed

    private void AnswerTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnswerTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AnswerTextFieldActionPerformed

    private void HelpCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpCheckBoxActionPerformed
        if(HelpCheckBox.isSelected()) {
        HelpTextField.setEnabled(true);
        HelpTextField.requestFocus();
        HelpTextField.selectAll();
        } else {
            //TODO save to file
            HelpTextField.setEnabled(false);
        }
    }//GEN-LAST:event_HelpCheckBoxActionPerformed

    private void CommentCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CommentCheckBoxActionPerformed
         if(CommentCheckBox.isSelected()) {
        CommentTextField.setEnabled(true);
        CommentTextField.requestFocus();
        CommentTextField.selectAll();
        } else {
            CommentTextField.setEnabled(false);
        }
    }//GEN-LAST:event_CommentCheckBoxActionPerformed

    private void ThemeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThemeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ThemeTextFieldActionPerformed

    private void TypeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TypeCheckBoxActionPerformed
        if(TypeCheckBox.isSelected()) {
        TypeTextField.setEnabled(true);    
        TypeTextField.requestFocus();
        TypeTextField.selectAll();
        } else {
            TypeTextField.setEnabled(false);
        }
    }//GEN-LAST:event_TypeCheckBoxActionPerformed

    private void QuestionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuestionCheckBoxActionPerformed
         if(QuestionCheckBox.isSelected()) {
        questionTextArea.setEnabled(true);
        questionTextArea.requestFocus();
        questionTextArea.selectAll();
        } else {
             questionTextArea.setEnabled(false);
        }
    }//GEN-LAST:event_QuestionCheckBoxActionPerformed

    private void ImageCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImageCheckBoxActionPerformed
        if(ImageCheckBox.isSelected()) {
        ImageTextField.setEnabled(true);
        ImageTextField.requestFocus();
        ImageTextField.selectAll();
        } else {
            ImageTextField.setEnabled(false);
        }
    }//GEN-LAST:event_ImageCheckBoxActionPerformed

    private void CodeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CodeCheckBoxActionPerformed
       if(CodeCheckBox.isSelected()) {
        CodeTextArea.setEnabled(true);
        CodeTextArea.requestFocus();
        CodeTextArea.selectAll();
        } else {
           CodeTextArea.setEnabled(false);
        }
    }//GEN-LAST:event_CodeCheckBoxActionPerformed

    private void ExplanationCheckFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExplanationCheckFieldActionPerformed
        if(ExplanationCheckField.isSelected()) {
        ExplanationTextField.setEnabled(true);
        ExplanationTextField.requestFocus();
        ExplanationTextField.selectAll();
        } else {
            ExplanationTextField.setEnabled(false);
        }
    }//GEN-LAST:event_ExplanationCheckFieldActionPerformed

    private void HeadTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HeadTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HeadTextFieldActionPerformed

    private void ImageTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImageTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ImageTextFieldActionPerformed

    private void MakeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MakeButtonActionPerformed
           
    }//GEN-LAST:event_MakeButtonActionPerformed

    private void ThemeTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ThemeTextFieldKeyPressed
         
    }//GEN-LAST:event_ThemeTextFieldKeyPressed

    private void TypeTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TypeTextFieldKeyPressed

    }//GEN-LAST:event_TypeTextFieldKeyPressed

    
    
   class nextChecked {
      private ArrayList<JCheckBox> textFields;
      int i;
       public nextChecked() {
           textFields = new ArrayList<JCheckBox> ();
           textFields.add(TypeCheckBox);
           textFields.add(HeadCheckBox);
           textFields.add(QuestionCheckBox);
           textFields.add(ImageCheckBox);
           textFields.add(CodeCheckBox);
           textFields.add(ExplanationCheckField);
           textFields.add(HelpCheckBox);
           textFields.add(CommentCheckBox);
           i = 0;
       }
      public JCheckBox getNextCheced() {
          if(i == textFields.size() - 1) {
              i = 0;
              return CommentCheckBox; 
          } else {
              if(textFields.get(i).isSelected()) {
                  return textFields.get(i);
              } else {
                  ++i;
                  return getNextCheced();
              }
          }
      }
   }
  
    
   static class TagFactory { 
        public String makeEmptyTag(String tag) {
            return new StringBuilder("<").append(tag).append(">").append("</")
                                          .append("tag").append(">").toString();
        }
        
        public String makeTag(String tag, String contents) {
            return new StringBuilder("<").append(tag).append(">").append(contents)
                                .append("</").append("tag").append(">").toString();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        TagFactory factory = new TagFactory();
                
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddAnswerButton;
    private javax.swing.JTextField AnswerTextField;
    private javax.swing.JCheckBox CodeCheckBox;
    private javax.swing.JScrollPane CodeScrollPane;
    private javax.swing.JTextArea CodeTextArea;
    private javax.swing.JCheckBox CommentCheckBox;
    private javax.swing.JTextField CommentTextField;
    private javax.swing.JCheckBox CorrectCheckBox;
    private javax.swing.JCheckBox ExplanationCheckField;
    private javax.swing.JTextField ExplanationTextField;
    private javax.swing.JCheckBox HeadCheckBox;
    private javax.swing.JTextField HeadTextField;
    private javax.swing.JCheckBox HelpCheckBox;
    private javax.swing.JTextField HelpTextField;
    private javax.swing.JCheckBox ImageCheckBox;
    private javax.swing.JTextField ImageTextField;
    private javax.swing.JButton MakeButton;
    private javax.swing.JCheckBox QuestionCheckBox;
    private javax.swing.JTextField ThemeTextField;
    private javax.swing.JCheckBox TypeCheckBox;
    private javax.swing.JTextField TypeTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JScrollPane questionScrollPane;
    private javax.swing.JTextArea questionTextArea;
    // End of variables declaration//GEN-END:variables
}
